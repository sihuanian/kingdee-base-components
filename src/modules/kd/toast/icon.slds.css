/*******************************************
* Imported dependency from @salesforce-ux/sds-primitives/src/sds/icon/icon.css
*******************************************/
/* Copyright (c) 2015-present, salesforce.com, inc. All rights reserved
  Licensed under BSD 3-Clause - see LICENSE.txt or git.io/sfdc-license */
:host([data-render-mode="shadow"]) {
  /**
     * Establish independent formatting context, we don't want ancestor rules affecting our layout.
     * This assumes there will not be a direct, child inline-level element.
     * See https://www.w3.org/TR/css-display-3/#establish-an-independent-formatting-context
     */
  display: inline-flex;
}
:host([data-render-mode="shadow"]) [part~='boundary'] {
  padding-block-start: var(
    --sds-c-icon-spacing-blockstart,
    var(--sds-c-icon-spacing-block, var(--sds-c-icon-spacing, var(--sds-s-icon-spacing)))
  );
  padding-block-end: var(
    --sds-c-icon-spacing-blockend,
    var(--sds-c-icon-spacing-block, var(--sds-c-icon-spacing, var(--sds-s-icon-spacing)))
  );
  padding-inline-start: var(
    --sds-c-icon-spacing-inlinestart,
    var(--sds-c-icon-spacing-inline, var(--sds-c-icon-spacing, var(--sds-s-icon-spacing)))
  );
  padding-inline-end: var(
    --sds-c-icon-spacing-inlineend,
    var(--sds-c-icon-spacing-inline, var(--sds-c-icon-spacing, var(--sds-s-icon-spacing)))
  );
  border-radius: var(--sds-c-icon-radius-border, var(--sds-s-icon-radius-border));
  border-width: var(--sds-c-icon-sizing-border, var(--sds-s-icon-sizing-border));
  border-style: solid;

  /* If undefined, border-color resolves to currentColor, so we need to explicitly set to transparent */
  border-color: var(--sds-c-icon-color-border, var(--sds-s-icon-color-border, transparent));
  background-color: var(--sds-c-icon-color-background, var(--sds-s-icon-color-background));
}
:host([data-render-mode="shadow"]) [part~='icon'] {
  display: flex; /* See line #5 */
  height: var(--sds-c-icon-sizing-height, var(--sds-c-icon-sizing, var(--sds-s-icon-sizing)));
  width: var(--sds-c-icon-sizing-width, var(--sds-c-icon-sizing, var(--sds-s-icon-sizing)));
  color: var(--sds-c-icon-color-foreground, var(--sds-s-icon-color-foreground));
}
/**
   * Normalize svgs and control width/height with Styling Hooks
   */
:host([data-render-mode="shadow"]) svg {
  width: 100%;
  height: 100%;
}
/**
 * @Note: Static fallbacks are in place until SLDS adopts SDS. Without static
 *        fallbacks, styles will regress due to invalid CSS variables from
 *        missing SLDS shared and globals.
 *
 *        Additionally, LBC are currently relying on 'part' attributes to
 *        receive styling. Authoring styles that rely on slots is not recommended.
 */
:host([data-render-mode="shadow"]) {
  vertical-align: middle;
}
:host([data-render-mode="shadow"][size='xxx-small']),:host([data-render-mode="shadow"]) 
.kdds-icon_xxx-small {
  --kdds-c-icon-sizing: var(--kdds-g-sizing-3);
}
:host([data-render-mode="shadow"][size='xx-small']),:host([data-render-mode="shadow"]) 
.kdds-icon_xx-small {
  --kdds-c-icon-sizing: calc(var(--kdds-g-sizing-1) + var(--kdds-g-sizing-4));
}
:host([data-render-mode="shadow"][size='x-small']),:host([data-render-mode="shadow"]) 
.kdds-icon_x-small {
  --kdds-c-icon-sizing: var(--kdds-g-sizing-5);
}
:host([data-render-mode="shadow"][size='small']),:host([data-render-mode="shadow"]) 
.kdds-icon_small {
  --kdds-c-icon-sizing: var(--kdds-g-sizing-7);
}
:host([data-render-mode="shadow"][size='large']),:host([data-render-mode="shadow"]) 
.kdds-icon_large {
  --kdds-c-icon-sizing: var(--kdds-g-sizing-10);
}
:host([data-render-mode="shadow"][variant='warning']) {
  --kdds-c-icon-color-foreground: var(--kdds-g-color-warning-1);
}
:host([data-render-mode="shadow"][variant='success']) {
  --kdds-c-icon-color-foreground: var(--kdds-g-color-success-1);
}
:host([data-render-mode="shadow"][variant='error']) {
  --kdds-c-icon-color-foreground: var(--kdds-g-color-error-1);
}
:host([data-render-mode="shadow"][variant='light']) {
  --kdds-c-icon-color-foreground: var(--kdds-g-color-neutral-base-70);
}
:host([data-render-mode="shadow"]) [part='boundary'] {
  /* --sds-c-icon-color-background: var(--kdds-c-icon-color-background); */
  --sds-c-icon-radius-border: var(--kdds-c-icon-radius-border, var(--kdds-g-radius-border-2));
  --sds-c-icon-sizing-border: var(--kdds-c-icon-sizing-border, 0);
  --sds-c-icon-color-border: var(--kdds-c-icon-color-border);
  --sds-c-icon-spacing-block-start: var(--kdds-c-icon-spacing-blockstart, var(--kdds-c-icon-spacing-block));
  --sds-c-icon-spacing-block-end: var(--kdds-c-icon-spacing-blockend, var(--kdds-c-icon-spacing-block));
  --sds-c-icon-spacing-inline-start: var(
    --kdds-c-icon-spacing-inlinestart,
    var(--kdds-c-icon-spacing-inline)
  );
  --sds-c-icon-spacing-inline-end: var(--kdds-c-icon-spacing-inlineend, var(--kdds-c-icon-spacing-inline));

  /**
     * There's a divergence in LBC that we have to support here: LBC splits their
     * icon implementation into two components: lightning-icon and lightning-primitive-icon.
     * kdds-icon is consumed within both with no issues except that the presence of an
     * additional custom element (primitive-icon) creates an unexpected inline-level
     * element and breaks our formatting context. tl;dr, we have to reset the formatting
     * context of the boundary or else we'll inherit line-height from an ancestor and
     * get visual regressions.
     *
     * If lightning-icon is refactored into a single component, this line can be removed.
     */
  display: inline-flex;
}
:host([data-render-mode="shadow"]) .kdds-input__icon [part='boundary'] {
  border-style: none;
}
:host([data-render-mode="shadow"]) [part='icon'] {
  --sds-c-icon-color-foreground: var(--kdds-c-icon-color-foreground, var(--kdds-g-color-on-accent-1));
  --sds-c-icon-sizing-height: var(
    --kdds-c-icon-sizing-height,
    var(--kdds-c-icon-sizing, var(--kdds-g-sizing-9))
  );
  --sds-c-icon-sizing-width: var(
    --kdds-c-icon-sizing-width,
    var(--kdds-c-icon-sizing, var(--kdds-g-sizing-9))
  );
}
:host([data-render-mode="shadow"][icon-name*='action']),:host([data-render-mode="shadow"]) 
.kdds-icon_container_circle {
  --kdds-c-icon-spacing-block: var(--kdds-g-sizing-3);
  --kdds-c-icon-spacing-inline: var(--kdds-g-sizing-3);
  --kdds-c-icon-radius-border: calc(var(--kdds-g-radius-border-circle) / 2);
  --kdds-c-icon-sizing-border: var(--kdds-g-sizing-3);
}
/**
 * P R I V A T E
 *
 * The following styling is implemented by classes within the shadow DOM.
 * They're expected to be private to the component and not for external use.
 *
 * See notes for each class for the rationale behind their inclusion.
 */
/**
 * Utility icons traditionally added a class to change the default foreground
 * color (white) to a grey. This was done implicitly whereas other color changes
 * were done explicitly through the 'variant' attribute. So this is an outlier
 * to the overall pattern. Leaving it as-is since an update would require an
 * API change or more investigating.
 *
 * This is a hybrid patch between synthetic and native shadow. The ideal final
 * outcome is the removal of this class and the default utility styling would
 * be implemented through an attribute or some other class-less solution.
 */
:host([data-render-mode="shadow"]) .kdds-icon {
  display: inline-flex;
  height: var(
    --kdds-c-icon-sizing-height,
    var(--kdds-c-icon-sizing, var(--kdds-s-icon-sizing, var(--kdds-g-sizing-9)))
  );
  width: var(
    --kdds-c-icon-sizing-width,
    var(--kdds-c-icon-sizing, var(--kdds-s-icon-sizing, var(--kdds-g-sizing-9)))
  );
  fill: var(--kdds-c-icon-color-foreground, var(--kdds-g-color-neutral-base-100));
}
:host([data-render-mode="shadow"]) .kdds-icon-text-default {
  /*! @css-var-fallback fill */
  --kdds-c-icon-color-foreground: var(
    --kdds-c-icon-color-foreground-default,
    var(--sds-c-icon-color-foreground-default, var(--kdds-g-color-on-surface-1))
  );
}
:host([data-render-mode="shadow"]) .kdds-icon-text-default.kdds-is-disabled {
  fill: var(--kdds-g-color-disabled-1);
}
/**
 * A temporarily baked-in utility class until SLDS gets a proper utility package.
 *
 * This is a hybrid patch between synthetic and native shadow. The ideal final
 * outcome is the removal of this class and replacing the class with the SLDS
 * utility package solution.
 */
:host([data-render-mode="shadow"]) .kdds-assistive-text {
  position: absolute !important;
  margin: -1px !important;
  border: 0 !important;
  padding: 0 !important;
  width: 1px !important;
  height: 1px !important;
  overflow: hidden !important;
  clip: rect(0 0 0 0) !important;
  text-transform: none !important;
  white-space: nowrap !important;
}
/**
 * For the initial alpha version, we're hardcoding in the various unique icon styles.
 *
 * Next version, we want to dynamically generate these from legacy SLDS with the
 * following design pattern:
 *
 * [type="action"][icon-name="approval"] {
 *   --sds-c-icon-color-background: var(--kdds-c-icon-color-background, #111);
 * }
 */
:host([data-render-mode="shadow"]) .kdds-icon_disabled {
  background-color: currentcolor;
}
:host([data-render-mode="shadow"]) .kdds-input__icon {
  --kdds-c-icon-sizing: calc(var(--kdds-g-sizing-1) + var(--kdds-g-sizing-4));

  position: absolute;
  top: 50%;
  margin-block-start: -0.4375rem;
  line-height: var(--kdds-g-font-lineheight-1);
  border: 0;
  z-index: 2;
}
:host([data-render-mode="shadow"][data-input-pill-search-primicon]) .kdds-icon {
  --sds-c-icon-sizing-height: 1.25rem;
  --sds-c-icon-sizing-width: 1.25rem;
}
:host([data-render-mode="shadow"][data-input-pill-close-primicon]) [part='icon'] {
  --sds-c-icon-color-foreground: none;
}
:host([data-render-mode="shadow"][data-input-pill-close-primicon]) [part='icon']:hover {
  --sds-c-icon-color-foreground: var(--kdds-g-color-accent-4);
}
:host([data-render-mode="shadow"]) .kdds-icon_container {
  border-radius: var(--kdds-c-icon-radius-border, var(--kdds-s-icon-radius-border));
  background-color: var(
    --kdds-c-icon-color-background,
    var(--kdds-s-icon-color-background, var(--sds-c-icon-color-background))
  );
}
